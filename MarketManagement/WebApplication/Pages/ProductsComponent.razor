@page "/products"
@inject NavigationManager NavigationManager
@inject UseCases.IViewProductsUseCase ViewProductsUseCase
@inject UseCases.IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject UseCases.ProductsUseCases.IDeleteProductUseCase DeleteProductUseCase

<h3>Products</h3>
<br />
@if (products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Category</th>
                <th>Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
            <tr>
                <td>@GetCategoryByIdUseCase.Execute(product.CategoryId.Value)?.Name</td>
                <td>@product.Name</td>
                <td>@(Math.Round(product.Price.Value,2))</td>
                <td>@product.Quantity</td>
                <td>
                    <button type="button" @onclick="@(() => OnEditProduct(product))" class="btn btn-link">Edit</button>
                    &nbsp;
                    <button type="button" @onclick="@(() => DeleteProduct(product.ProductId))" class="btn btn-link">Delete</button>
                </td>

            </tr>
            }
        </tbody>
    </table>

}
<br />
<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary"> Add Product </button>

@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadProducts();
    }
    private void LoadProducts()
    {
        products = ViewProductsUseCase.Execute()?.ToList();
    }
    private void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }
    private void OnEditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.ProductId}");
    }
    private void DeleteProduct(int productId)
    {
        DeleteProductUseCase.Execute(productId);
        LoadProducts();

    }

}
