@inject UseCases.ProductsUseCases.IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase  SellProductUseCase
@if (productToSell != null)
{
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Product Name</label>
            <input class="form-control" id="name" type="text" readonly value="@productToSell.Name" />
        </div>
        <div class="form-group">
            <label for="price">Product Price</label>
            <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}",productToSell.Price))" />
        </div>
        <div class="form-group">
            <label for="quantity">Product Quantity</label>
            <InputNumber id="quantity" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>


}




@code {

    private Product productToSell;
    private string errorMessage;
    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedProduct != null)
        {
            productToSell = new Product
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Quantity = 0,
                Price = SelectedProduct.Price
            };
        }
        else
        {
            productToSell = null; //da obrise se donja tabela kad se izabere neka druga kategorija
        }

    }
    private void SellProduct()
    {
        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);
        if (productToSell.Quantity <= 0)
        {
            errorMessage = "The quantity has to be greather than zero.";
        }
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(productToSell.ProductId, productToSell.Quantity.Value); // Bez Value baca exc:   Severity	Code	Description	Project	File	Line	Suppression State
                                                                                               // Error CS1503  Argument 2: cannot convert from 'int?' to 'int' WebApplication C:\Users\Nevena\source\repos\asp.netApp\MarketManagement\WebApplication\Controls\SellProductComponent.razor 71  Active

        }

        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left. It is not enough.";
        }

    }


}
